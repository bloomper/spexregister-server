plugins {
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.asciidoctor.jvm.convert' version '4.0.2'
    id 'io.freefair.lombok' version '8.6'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'org.graalvm.buildtools.native' version '0.10.1'
    id 'jacoco'
    id 'java'
}

group = 'nu.fgv.register'
version = '2.0.0-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file('build/generated-snippets'))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    implementation 'org.springframework.security:spring-security-acl'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    implementation('net.sf.jmimemagic:jmimemagic:0.1.5') {
        ['commons-logging', 'log4j'].each {
            exclude group: it
        }
    }
    implementation 'org.apache.commons:commons-lang3:3.14.0'
    implementation 'org.apache.poi:poi:5.2.5'
    implementation 'org.apache.poi:poi-ooxml:5.2.5'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-60:3.7.3'
    implementation 'com.google.guava:guava:33.1.0-jre'
    implementation 'org.keycloak:keycloak-admin-client:24.0.1'
    implementation 'org.passay:passay:1.6.4'
    implementation 'org.hibernate.search:hibernate-search-mapper-orm'
    implementation 'org.hibernate.search:hibernate-search-backend-lucene'
    //implementation 'org.hibernate.search:hibernate-search-backend-elasticsearch'
    implementation 'org.apache.lucene:lucene-backward-codecs:9.9.2'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'org.hibernate.orm:hibernate-jpamodelgen'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.github.dvgaba:easy-random-randomizers:7.0.0'
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
    testImplementation 'io.rest-assured:rest-assured-all:5.4.0'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    //testImplementation 'org.opensearch:opensearch-testcontainers:2.0.1'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'
    testImplementation 'com.github.dasniko:testcontainers-keycloak:3.3.0'

    runtimeOnly 'com.mysql:mysql-connector-j'
    testRuntimeOnly 'io.netty:netty-resolver-dns-native-macos:4.1.107.Final:osx-aarch_64'
}

dependencyManagement {
    imports {
        mavenBom 'org.testcontainers:testcontainers-bom:1.19.7'
        mavenBom 'org.hibernate.search:hibernate-search-bom:7.1.0.Final'
    }
}

compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
}

tasks.register('createSnippetsDir') {
    doLast {
        project.mkdir snippetsDir
    }
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    dependsOn createSnippetsDir
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn createSnippetsDir, test
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

asciidoctor {
    sourceDir 'src/main/asciidoc'
    attributes   \
        'snippets': file('build/generated-snippets')
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

sonar {
    properties {
        property 'sonar.projectKey', 'bloomper_spexregister-server'
        property 'sonar.organization', 'bloomper'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.exclusions', '**/**_.java'
    }
}

