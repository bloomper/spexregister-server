plugins {
    id 'org.springframework.boot' version '2.6.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'java'
}

group = 'nu.fgv.register'
version = '2.0.0-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('testcontainersVersion', "1.16.2")
    set('ehcacheVersion', "2.6.11")
    set('mapstructVersion', "1.4.2.Final")
    set('jmimemagicVersion', "0.1.5")
    set('easyRandomVersion', "0.3.0")
    set('fakerVersion', "1.0.2")
    set('restAssuredVersion', "4.5.0")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    //implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    implementation 'org.springframework.security:spring-security-acl'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation "net.sf.ehcache:ehcache-core:${ehcacheVersion}"
    implementation "net.sf.jmimemagic:jmimemagic:${jmimemagicVersion}"
    implementation 'org.flywaydb:flyway-core'
    implementation 'com.querydsl:querydsl-core'
    implementation 'com.querydsl:querydsl-jpa'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jpa',
            'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final',
            'javax.annotation:javax.annotation-api'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "org.mvnsearch:easy-random-junit5-extension:${easyRandomVersion}"
    testImplementation "com.github.javafaker:javafaker:${fakerVersion}"
    testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
    testImplementation "io.rest-assured:rest-assured-all:${restAssuredVersion}"
    //testImplementation 'org.testcontainers:elasticsearch'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

test {
    exclude '**/**IntegrationTest*'
}

asciidoctor {
    sourceDir 'src/main/asciidoc'
    attributes \
      'snippets': file('build/generated-snippets')
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}