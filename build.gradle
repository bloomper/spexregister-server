plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.sonarqube' version '5.1.0.4882'
    //id 'org.graalvm.buildtools.native' version '0.10.3'
    id 'jacoco'
}

group = 'nu.fgv.register'
version = '2.0.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
            runtimeClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
            srcDir file('src/integrationtest/java')
        }
        resources.srcDir file('src/integrationtest/resources')
    }
}

configurations {
    compileOnly.extendsFrom annotationProcessor
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file('build/generated-snippets'))
}

dependencies {
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    compileOnly 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    implementation 'org.springframework.security:spring-security-acl'
    implementation 'org.mapstruct:mapstruct:1.6.2'
    implementation('net.sf.jmimemagic:jmimemagic:0.1.5') {
        ['commons-logging', 'log4j'].each {
            exclude group: it
        }
    }
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'org.apache.poi:poi:5.3.0'
    implementation 'org.apache.poi:poi-ooxml:5.3.0'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-60:3.8.3'
    implementation 'com.google.guava:guava:33.3.1-jre'
    implementation 'org.keycloak:keycloak-admin-client:26.0.0'
    implementation 'org.passay:passay:1.6.5'
    implementation 'org.hibernate.search:hibernate-search-mapper-orm'
    implementation 'org.hibernate.search:hibernate-search-backend-lucene'
    //implementation 'org.hibernate.search:hibernate-search-backend-elasticsearch'
    implementation 'org.apache.lucene:lucene-backward-codecs:9.11.1'
    implementation 'net.datafaker:datafaker:2.4.0'
    implementation 'org.jboss.logging:jboss-logging:3.6.1.Final' // Remove once Hibernate Core uses 3.6+

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.2'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'org.hibernate.orm:hibernate-jpamodelgen'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.github.dvgaba:easy-random-randomizers:7.0.0'

    integrationTestImplementation 'io.rest-assured:rest-assured:5.5.0'
    integrationTestImplementation 'io.rest-assured:rest-assured-all:5.5.0'
    integrationTestImplementation 'org.springframework.boot:spring-boot-testcontainers'
    //integrationTestImplementation 'org.opensearch:opensearch-testcontainers:2.1.1'
    integrationTestImplementation 'org.testcontainers:junit-jupiter'
    integrationTestImplementation 'org.testcontainers:mysql'
    integrationTestImplementation 'com.github.dasniko:testcontainers-keycloak:3.5.1'

    runtimeOnly 'com.mysql:mysql-connector-j'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'io.netty:netty-resolver-dns-native-macos:4.1.113.Final:osx-aarch_64'
}

dependencyManagement {
    imports {
        mavenBom 'org.testcontainers:testcontainers-bom:1.20.2'
        mavenBom 'org.hibernate.search:hibernate-search-bom:7.2.1.Final'
    }
}

tasks.register('createSnippetsDir') {
    doLast {
        project.mkdir snippetsDir
    }
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    dependsOn createSnippetsDir
}

tasks.register('integrationTest', Test) {
    description = 'Runs the integration tests'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
}

integrationTest {
    useJUnitPlatform()
}

rootProject.tasks.named("processIntegrationTestResources") {
    duplicatesStrategy = 'include'
}

jacocoTestReport {
    dependsOn test, integrationTest
    reports {
        xml.required = true
    }
    additionalSourceDirs.from = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(sourceSets.main.output.classesDirs)
    executionData.from = fileTree(layout.buildDirectory).include(
            'jacoco/test.exec',
            'jacoco/integrationTest.exec'
    )
}

check.dependsOn jacocoTestReport

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn createSnippetsDir, test
}

asciidoctor {
    sourceDir 'src/main/asciidoc'
    attributes   \
        'snippets': file('build/generated-snippets'),
        'template-snippets': file('src/main/asciidoc/snippets')
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

sonar {
    properties {
        property 'sonar.projectKey', 'bloomper_spexregister-server'
        property 'sonar.organization', 'bloomper'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.exclusions', '**/**_.java'
    }
}
